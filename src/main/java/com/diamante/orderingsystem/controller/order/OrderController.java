package com.diamante.orderingsystem.controller.order;

import com.diamante.orderingsystem.controller.AutoGeneratedIdException;
import com.diamante.orderingsystem.entity.Order;
import com.diamante.orderingsystem.service.order.OrderService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import org.springframework.dao.DataRetrievalFailureException;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.TransactionSystemException;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.time.LocalDate;
import java.util.List;

import static com.diamante.orderingsystem.utils.ExceptionUtils.createErrorMessageAndThrowEntityValidationException;

@RestController
@Api(value = "Orders API", description = "Store new orders containing products purchased by existing customers.")
public class OrderController {

    private final OrderService orderService;

    public OrderController(OrderService orderService) {
        this.orderService = orderService;
    }

    @ApiOperation(value = "View a list of all orders for a given customer id.")
    @GetMapping("/customer/{customerId}/order")
    public List<Order> getAllOrdersForCustomer(@RequestParam(required = false)
                                               @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
                                               @PathVariable("customerId") Long customerId) {
        return date != null ? orderService.findAllOrdersForCustomerAfterOrderDate(customerId, date) :
                orderService.findAllOrdersForCustomer(customerId);
    }

    @ApiOperation(value = "Save an order for a customer.")
    @ApiResponse(code = 201, message = "Order created")
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping("/order")
    public Order createOrderForCustomer(@Valid @RequestBody Order order, BindingResult result) {
        if (order.getOrderId() != null) {
            throw new AutoGeneratedIdException("Order id is auto generated. Please remove this field from your request.");
        }

        if (result.hasErrors()) {
            createErrorMessageAndThrowEntityValidationException(result);
        }

        return orderService.saveOrder(order);
    }

    @ApiOperation(value = "Updates the order given the correct id.")
    @PutMapping("/order")
    public Order updateOrder(@Valid @RequestBody Order order, BindingResult result) {
        if (result.hasErrors()) {
            createErrorMessageAndThrowEntityValidationException(result);
        }

        Order updatedOrder;

        try {
            updatedOrder = orderService.updateOrder(order);
        } catch (TransactionSystemException ex) {
            throw new TransactionSystemException("Order was not updated. Error while committing the transaction.");
        }

        if (updatedOrder == null) {
            throw new OrderNotFoundException("Order with id " + order.getOrderId() + " was not found.");
        }

        return updatedOrder;
    }

    @ApiOperation(value = "Deletes the order when given an id")
    @ApiResponse(code = 204, message = "Order deleted, no content.")
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping("/order/{orderId}")
    public void deleteOrder(@PathVariable("orderId") Long orderId) {
        try {
            orderService.deleteOrderById(orderId);
        } catch (DataRetrievalFailureException ex) {
            throw new DataRetrievalFailureException("There is no order with id " + orderId + " in the database");
        }
    }

    @ApiOperation(value = "Deletes all orders for given customer")
    @ApiResponse(code = 204, message = "Orders deleted, no content.")
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping("/customer/{customerId}/order")
    public void deleteAllOrdersForCustomer(@PathVariable("customerId") Long customerId) {
        orderService.deleteAllOrdersForCustomer(customerId);
    }
}
